name: Build and Push Docker Image

# Concurrency group scoped to the workflow run. The last run will cancel any in-progress job.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly to keep images up to date

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Caddy version and plugins
        id: caddy-version
        run: |
          # Get the latest 2.9.x version instead of latest
          CADDY_VERSION=$(curl -s 'https://api.github.com/repos/caddyserver/caddy/releases' | jq -r '[.[] | select(.tag_name | startswith("v2.9."))] | first | .tag_name' | sed 's/v//')
          echo "version=$CADDY_VERSION" >> $GITHUB_OUTPUT
          
          # Function to compare semantic versions
          version_gte() {
            # $1 = version to check, $2 = minimum version
            printf '%s\n%s\n' "$2" "$1" | sort -V -C
            return $?
          }

          version_lt() {
            # $1 = version to check, $2 = maximum version
            ! version_gte "$1" "$2"
            return $?
          }

          extract_go_mod_version() {
            # Extract version requirement from go.mod line
            # Input example: require github.com/caddyserver/caddy/v2 v2.9.1
            echo "$1" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' || echo ""
          }

          # Function to check if a tag exists and is compatible with Caddy 2.9.1
          check_compatible_version() {
            local repo=$1
            local target_version="2.9.1"
            local tags_url="https://api.github.com/repos/caddy-dns/$repo/tags"
            
            # Get all tags
            for tag in $(curl -s "$tags_url" | jq -r '.[].name'); do
              # For each tag, check its go.mod for Caddy compatibility
              go_mod_url="https://raw.githubusercontent.com/caddy-dns/$repo/$tag/go.mod"
              if caddy_req=$(curl -s "$go_mod_url" | grep "github.com/caddyserver/caddy/v2" | head -n1); then
                # Extract the actual version requirement
                req_version=$(extract_go_mod_version "$caddy_req")
                if [ ! -z "$req_version" ]; then
                  req_version=${req_version#v}  # Remove 'v' prefix
                  # Check if the required version is compatible (>= 2.7.0 and < 2.10.0)
                  if version_gte "$req_version" "2.7.0" && version_lt "$req_version" "2.10.0"; then
                    echo "$tag"
                    return 0
                  fi
                fi
              fi
            done
            return 1
          }
          
          # Start building xcaddy args with Caddy version
          XCADDY_ARGS="v$CADDY_VERSION"
          
          # Get all DNS plugins and check compatibility
          for repo in $(curl -s 'https://api.github.com/orgs/caddy-dns/repos?per_page=100' | jq -r '.[] | select(.archived == false and .name != "template") | .name'); do
            echo "Checking $repo..."
            if compatible_version=$(check_compatible_version "$repo"); then
              echo "✓ Found compatible version for $repo: $compatible_version"
              XCADDY_ARGS="$XCADDY_ARGS --with github.com/caddy-dns/$repo@$compatible_version"
            else
              echo "✗ No compatible version found for $repo"
            fi
          done
          
          echo "xcaddy_args=$XCADDY_ARGS" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/caddy-all
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.caddy-version.outputs.version }}
            type=schedule,pattern=nightly
            type=raw,value=${{ steps.caddy-version.outputs.version }}-{{date 'YYYYMMDD'}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=Caddy with DNS plugins
            org.opencontainers.image.description=Caddy server with all DNS provider plugins built-in
            org.opencontainers.image.version=${{ steps.caddy-version.outputs.version }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.base.name=caddy:latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            XCADDY_ARGS=${{ steps.caddy-version.outputs.xcaddy_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
